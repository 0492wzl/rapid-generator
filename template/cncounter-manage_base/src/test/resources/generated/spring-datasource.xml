<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">
        <!--default-autowire="byName">-->

    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${r'${mysql.jdbc.url}'}" />
        <property name="username" value="${r'${mysql.jdbc.username}'}" />
        <property name="password" value="${r'${mysql.jdbc.password}'}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${r'${initialSize}'}" />
        <property name="maxActive" value="${r'${maxActive}'}" />
        <property name="minIdle" value="${r'${minIdle}'}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="10000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="30000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="60000" />
        <!-- 连接有效性测试 -->
        <property name="validationQuery" value="${r'${validationQuery}'}" />
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="false" />
        <property name="testWhileIdle" value="true" />
        <!-- 强行关闭长时间不归还的连接,防止泄露,单位秒 -->
        <property name="removeAbandoned" value="true" />
        <property name="removeAbandonedTimeout" value="1800" />
        <property name="logAbandoned" value="true" />
        <property name="filters" value="config,mergeStat" />
        <!-- 提示Druid数据源需要对数据库密码进行解密 -->
        <property name="connectionProperties" value="config.decrypt=${r'${config.decrypt}'}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小
            Oracle，则把poolPreparedStatements配置为true;
            mysql可以配置为false,分库分表较多的数据库，建议配置为false
            参考:https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter
        -->
        <property name="poolPreparedStatements" value="false" />
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20" />
        <!-- 如果有特殊SQL被拦截,可以将SQL防火墙wall去掉 -->
        <!--
        <property name="filters" value="wall"/>
         -->
        <property name="proxyFilters">
            <list>
                <!-- 挂载监控统计拦截的filters -->
                <ref bean="stat-filter" />
                <ref bean="log-filter" />
            </list>
        </property>
    </bean>

    <!-- myBatis sqlSessionFactory -->
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:generated/sqlMapConfig.xml"></property>
        <!-- 表示在包或所有子目录中，以 *Mapper.xml结尾所有文件 -->
        <property name="mapperLocations">
            <value>classpath*:mappers/**/*.xml</value>
        </property>
    </bean>

    <!-- 配置SQLSession模板 -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sessionFactory" />
    </bean>

    <!-- 自动扫描下面的组件 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="${basepackage}.dao" />
        <property name="sqlSessionFactoryBeanName" value="sessionFactory" />
    </bean>

    <!-- 事务 -->
    <aop:config proxy-target-class="true">
        <aop:advisor pointcut="execution(* ${basepackage}.service.*Service.*(..))" advice-ref="txAdvice" />
    </aop:config>

    <!-- 启用annotation注解方式配置事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true" />
            <tx:method name="find*" read-only="true" />
            <tx:method name="load*" read-only="true" />
            <tx:method name="query*" read-only="true" />
            <tx:method name="build*" read-only="true" />
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>

    <!-- 配置druid监控spring jdbc -->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="slowSqlMillis" value="3000" />
        <!-- 统计慢SQL的开关 -->
        <property name="logSlowSql" value="true" />
        <!-- 在统计中合并同类SQL的开关 -->
        <property name="mergeSql" value="true" />
    </bean>
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <!-- 日志输出,输出可执行语句 -->
        <property name="statementExecutableSqlLogEnable" value="false" />
    </bean>
    <bean id="druid-stat-interceptor"
          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
          scope="prototype">
        <property name="patterns">
            <list>
                <value>${basepackage}.service.impl.*</value>
            </list>
        </property>
    </bean>
    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor"
                     pointcut-ref="druid-stat-pointcut" />
    </aop:config>

    <!-- 持有Spring上下文环境的类 -->
    <bean id="springContextHolder" class="${basepackage}.common.utils.SpringContextHolder" />
</beans>
